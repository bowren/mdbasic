<?xml version="1.0" encoding="UTF-8"?>
<!--
 6502 Turbo Assembler v 1.1.0
 @see http://turbo.style64.org/docs/turbo-macro-pro-tmpx-syntax
 
 Author: Mark Bowren <mark@bowren.com>
 Copyright (C) 2008-2021 Mark Bowren

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Library General Public
 License as published by the Free Software Foundation; either
 version 2 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Library General Public License for more details.

 You should have received a copy of the GNU Library General Public
 License along with this library; if not, write to the
 Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 Boston, MA 02111-1307, USA.

-->
<language id="tasm64" _name="TASM64" version="2.0" _section="Others">
	<metadata>
		<property name="mimetypes">text/x-asm;text/plain</property>
		<property name="globs">*.asm</property>
		<property name="line-comment-start">;</property>
	</metadata>

	<styles>
		<style id="preprocessor"      _name="Preprocessor"          map-to="def:preprocessor"/>
		<style id="opcode"            _name="Opcode"                map-to="def:keyword"/>
		<!--style id="register"          _name="Register"              map-to="def:identifier"/-->
		<style id="type"              _name="Data Type"             map-to="def:type"/>
		<style id="comment"           _name="Comment"               map-to="def:comment"/>
		<style id="string"            _name="String"                map-to="def:string"/>
		<style id="escaped-character" _name="Escaped Character"     map-to="def:special-char"/>
		<style id="floating-point"    _name="Floating point number" map-to="def:floating-point"/>
		<style id="decimal"           _name="Decimal number"        map-to="def:decimal"/>
		<style id="octal"             _name="Octal number"          map-to="def:base-n-integer"/>
		<style id="hexadecimal"       _name="Hexadecimal number"    map-to="def:base-n-integer"/>
		<style id="binary"            _name="Binary number"         map-to="def:base-n-integer"/>
	</styles>

	<default-regex-options case-sensitive="false"/>

	<definitions>
		<define-regex id="escaped-character" extended="true">
			\\(      # leading backslash
			[\\\"\'] # escaped character
			)
		</define-regex>

		<context id="tasm64">
			<include>
				<!-- Comments -->
				<context id="comment" style-ref="comment" end-at-line-end="true">
					<start>(;)</start>
					<include>
						<context ref="def:in-line-comment"/>
					</include>
				</context>

				<context id="string" style-ref="string" end-at-line-end="true">
					<start>"</start>
					<end>"</end>
					<include>
						<context id="escaped-characterw" style-ref="escaped-character">
						    <match>\%{escaped-character}</match>
						</context>
					</include>
				</context>

				<context id="string2" style-ref="string" end-at-line-end="true">
					<start>'</start>
					<end>'</end>
					<include>
					<context id="escaped-characters" style-ref="escaped-character">
						<match>\%{escaped-character}</match>
					</context>
					</include>
				</context>

				<context id="float" style-ref="floating-point">
					<match extended="true">
					(?&lt;![\w\.])
					((\.[0-9]+ | [0-9]+\.[0-9]*) ([Ee][+-]?[0-9]*)? |
					([0-9]+[Ee][+-]?[0-9]*))
					(?![\w\.])
					</match>
				</context>

				<context id="hexadecimal" style-ref="hexadecimal">
					<match extended="true">
					(?&lt;![\w\.])
					((0[xX][a-fA-F0-9]+)|([0-9][a-fA-F0-9]*h)|(\$[0-9A-Fa-f][a-fA-F0-9]+))
					(?![\w\.])
					</match>
				</context>

				<context id="octal" style-ref="octal">
					<match extended="true">
					(?&lt;![\w\.])
					[0-7]+[QOqo]
					(?![\w\.])
					</match>
				</context>

				<context id="decimal" style-ref="decimal">
					<match extended="true">
					(?&lt;![\w\.])
					[0-9]+
					(?![\w\.])
					</match>
				</context>

				<context id="binary" style-ref="binary">
					<match extended="true">
					(?&lt;![\w\.])
					([01]+[Bb])|(%[01]+)
					(?![\w\.])
					</match>
				</context>

				<!-- 6502/6510 Opcodes -->
				<context id="opcodes_simple" style-ref="opcode">
					<keyword>adc</keyword>
					<keyword>and</keyword>
					<keyword>asl</keyword>
					<keyword>bcc</keyword>
					<keyword>bcs</keyword>
					<keyword>beq</keyword>
					<keyword>bit</keyword>
					<keyword>bmi</keyword>
					<keyword>bne</keyword>
					<keyword>bpl</keyword>
					<keyword>brk</keyword>
					<keyword>bvc</keyword>
					<keyword>bvs</keyword>
					<keyword>clc</keyword>
					<keyword>cld</keyword>
					<keyword>cli</keyword>
					<keyword>clv</keyword>
					<keyword>cmp</keyword>
					<keyword>cpx</keyword>
					<keyword>cpy</keyword>
					<keyword>dec</keyword>
					<keyword>dex</keyword>
					<keyword>dey</keyword>
					<keyword>eor</keyword>
					<keyword>inc</keyword>
					<keyword>inx</keyword>
					<keyword>iny</keyword>
					<keyword>jmp</keyword>
					<keyword>jsr</keyword>
					<keyword>lda</keyword>
					<keyword>ldx</keyword>
					<keyword>ldy</keyword>
					<keyword>lsr</keyword>
					<keyword>nop</keyword>
					<keyword>ora</keyword>
					<keyword>pha</keyword>
					<keyword>php</keyword>
					<keyword>pla</keyword>
					<keyword>plp</keyword>
					<keyword>rol</keyword>
					<keyword>ror</keyword>
					<keyword>rti</keyword>
					<keyword>rts</keyword>
					<keyword>sbc</keyword>
					<keyword>sec</keyword>
					<keyword>sed</keyword>
					<keyword>sei</keyword>
					<keyword>sta</keyword>
					<keyword>stx</keyword>
					<keyword>sty</keyword>
					<keyword>tax</keyword>
					<keyword>tay</keyword>
					<keyword>tsx</keyword>
					<keyword>txa</keyword>
					<keyword>txs</keyword>
					<keyword>tya</keyword>
				</context>

				<context id="types" style-ref="type">
					<prefix>[\s]*\.</prefix>
					<keyword>byte</keyword>
					<keyword>null</keyword>
					<keyword>repeat</keyword>
					<keyword>rta</keyword>
					<keyword>screen</keyword>
					<keyword>shift</keyword>
					<keyword>text</keyword>
					<keyword>word</keyword>
				</context>

				<context id="preprocessor_predefinded" style-ref="preprocessor">
					<prefix>[\s]*\.</prefix>
					<keyword>block</keyword>
					<keyword>bend</keyword>
					<keyword>bounce</keyword>
					<keyword>end</keyword>
					<keyword>endif</keyword>
					<keyword>endm</keyword>
					<keyword>eor</keyword>
					<keyword>goto</keyword>
					<keyword>hidemac</keyword>
					<keyword>if</keyword>
					<keyword>ifdef</keyword>
					<keyword>ifeq</keyword>
					<keyword>ifmi</keyword>
					<keyword>ifndef</keyword>
					<keyword>ifne</keyword>
					<keyword>ifpl</keyword>
					<keyword>include</keyword>
					<keyword>lbl</keyword>
					<keyword>macro</keyword>
					<keyword>offs</keyword>
					<keyword>proff</keyword>
					<keyword>pron</keyword>
					<keyword>segment</keyword>
					<keyword>showmac</keyword>
					<keyword>var</keyword>
				</context>
			</include>

		</context>

	</definitions>
</language>
